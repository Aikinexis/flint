var e=Object.defineProperty,t=(t,n,r)=>((t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r)(t,"symbol"!=typeof n?n+"":n,r);class n{constructor(){t(this,"selectionChangeCallback",null),t(this,"preservedRange",null);try{document.addEventListener("selectionchange",this.handleSelectionChange.bind(this)),document.addEventListener("mouseup",this.handleMouseUp.bind(this)),console.log("[Flint Selection] Handler initialized on:",window.location.href)}catch(e){console.error("[Flint Selection] Failed to initialize:",e)}}preserveSelection(){try{const e=window.getSelection();e&&e.rangeCount>0&&(this.preservedRange=e.getRangeAt(0).cloneRange(),console.log("[Flint Selection] Selection preserved"))}catch(e){console.error("[Flint Selection] Error preserving selection:",e)}}restoreSelection(){try{if(this.preservedRange){const e=window.getSelection();e&&(e.removeAllRanges(),e.addRange(this.preservedRange),console.log("[Flint Selection] Selection restored"))}}catch(e){console.error("[Flint Selection] Error restoring selection:",e)}}clearPreservedSelection(){this.preservedRange=null}handleSelectionChange(){if(this.selectionChangeCallback)try{const e=this.getSelectedText();this.selectionChangeCallback(e||"")}catch(e){}}handleMouseUp(){try{const e=this.getSelectedText();e&&e.length>=3&&chrome.storage.local.set({"flint.lastSelection":e}).catch(()=>{})}catch(e){}}getSelectedText(){try{const e=window.getSelection();if(!e||0===e.rangeCount)return null;const t=e.toString().trim();return t.length>0?t:null}catch(e){return console.error("[Flint] Error getting selected text:",e),null}}getSelectionRange(){try{const e=window.getSelection();if(!e||0===e.rangeCount)return null;const t=e.getRangeAt(0);return t.collapsed?null:t}catch(e){return console.error("[Flint] Error getting selection range:",e),null}}onSelectionChange(e){this.selectionChangeCallback=e}isEditableSelection(){try{const e=window.getSelection();if(!e||0===e.rangeCount)return!1;const t=e.anchorNode;if(!t)return!1;const n=t.nodeType===Node.ELEMENT_NODE?t:t.parentElement;if(!n)return!1;if(n instanceof HTMLTextAreaElement)return!0;if(n instanceof HTMLInputElement){return["text","search","url","tel","email"].includes(n.type)}let r=n;for(;r;){if(r instanceof HTMLElement){const e=r.getAttribute("contenteditable");if("true"===e||""===e)return!0;if("false"===e)return!1}r=r.parentElement}return!1}catch(e){return console.error("[Flint] Error checking editable selection:",e),!1}}}class r{getCaretPosition(){try{const e=document.activeElement;if(!(e&&e instanceof HTMLElement))return null;if(e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement){return{element:e,offset:e.selectionStart??0}}if(this.isContentEditable(e)){const t=window.getSelection();if(!t||0===t.rangeCount)return null;const n=t.getRangeAt(0);return{element:e,offset:n.startOffset}}return null}catch(e){return console.error("[Flint] Error getting caret position:",e),null}}getCursorContext(e=500){try{const t=document.activeElement;if(!(t&&t instanceof HTMLElement))return null;if(t instanceof HTMLTextAreaElement||t instanceof HTMLInputElement){const n=t.value,r=t.selectionStart??0,i=Math.max(0,r-e),o=n.substring(i,r),s=Math.min(n.length,r+e);return{before:o,after:n.substring(r,s),fullText:n,cursorPosition:r}}if(this.isContentEditable(t)){const n=t.textContent||"",r=window.getSelection();if(!r||0===r.rangeCount)return null;const i=r.getRangeAt(0),o=this.getTextOffsetInElement(t,i.startContainer,i.startOffset),s=Math.max(0,o-e),a=n.substring(s,o),l=Math.min(n.length,o+e);return{before:a,after:n.substring(o,l),fullText:n,cursorPosition:o}}return null}catch(t){return console.error("[Flint] Error getting cursor context:",t),null}}getTextOffsetInElement(e,t,n){try{const r=document.createRange();return r.selectNodeContents(e),r.setEnd(t,n),r.toString().length}catch(r){return console.error("[Flint] Error calculating text offset:",r),0}}async insertAtCaret(e){try{const t=document.activeElement;if(!(t&&t instanceof HTMLElement))return console.warn("[Flint] No active element for text insertion"),await this.fallbackToClipboard(e,"No active element found");if(t instanceof HTMLTextAreaElement||t instanceof HTMLInputElement){return this.insertInTextarea(t,e)?{success:!0,usedClipboard:!1}:(console.warn("[Flint] Direct insertion failed in textarea, using clipboard fallback"),await this.fallbackToClipboard(e,"Direct insertion failed in textarea"))}if(this.isContentEditable(t)){return this.insertInContentEditable(e)?{success:!0,usedClipboard:!1}:(console.warn("[Flint] Direct insertion failed in contenteditable, using clipboard fallback"),await this.fallbackToClipboard(e,"Direct insertion failed in contenteditable"))}return console.warn("[Flint] Element does not support direct insertion, using clipboard fallback"),await this.fallbackToClipboard(e,"Unsupported editor type (e.g., Google Docs, complex editors)")}catch(t){return console.error("[Flint] Error inserting text at caret:",t),await this.fallbackToClipboard(e,`Insertion error: ${t instanceof Error?t.message:"Unknown error"}`)}}async replaceSelection(e){try{const t=document.activeElement;if(!(t&&t instanceof HTMLElement))return console.warn("[Flint] No active element for text replacement"),await this.fallbackToClipboard(e,"No active element found");if(t instanceof HTMLTextAreaElement||t instanceof HTMLInputElement){return this.replaceInTextarea(t,e)?{success:!0,usedClipboard:!1}:(console.warn("[Flint] Direct replacement failed in textarea, using clipboard fallback"),await this.fallbackToClipboard(e,"Direct replacement failed in textarea"))}if(this.isContentEditable(t)){return this.replaceInContentEditable(e)?{success:!0,usedClipboard:!1}:(console.warn("[Flint] Direct replacement failed in contenteditable, using clipboard fallback"),await this.fallbackToClipboard(e,"Direct replacement failed in contenteditable"))}return console.warn("[Flint] Element does not support direct replacement, using clipboard fallback"),await this.fallbackToClipboard(e,"Unsupported editor type (e.g., Google Docs, complex editors)")}catch(t){return console.error("[Flint] Error replacing selection:",t),await this.fallbackToClipboard(e,`Replacement error: ${t instanceof Error?t.message:"Unknown error"}`)}}supportsInsertion(e){try{if(e instanceof HTMLTextAreaElement)return!0;if(e instanceof HTMLInputElement){return["text","search","url","tel","email"].includes(e.type)}return!!this.isContentEditable(e)}catch(t){return console.error("[Flint] Error checking insertion support:",t),!1}}isContentEditable(e){const t=e.getAttribute("contenteditable");return"true"===t||""===t}insertInTextarea(e,t){try{const n=e.selectionStart??0,r=e.selectionEnd??0,i=e.value,o=i.substring(0,n)+t+i.substring(r);e.value=o;const s=n+t.length;e.selectionStart=s,e.selectionEnd=s;const a=new Event("input",{bubbles:!0});return e.dispatchEvent(a),!0}catch(n){return console.error("[Flint] Error inserting in textarea:",n),!1}}insertInContentEditable(e){try{const t=window.getSelection();if(!t||0===t.rangeCount)return!1;const n=t.getRangeAt(0);n.deleteContents();const r=document.createTextNode(e);n.insertNode(r),n.setStartAfter(r),n.setEndAfter(r),t.removeAllRanges(),t.addRange(n);const i=document.activeElement;if(i){const e=new Event("input",{bubbles:!0});i.dispatchEvent(e)}return!0}catch(t){return console.error("[Flint] Error inserting in contenteditable:",t),!1}}replaceInTextarea(e,t){try{const n=e.selectionStart??0,r=e.selectionEnd??0,i=e.value,o=i.substring(0,n)+t+i.substring(r);e.value=o,e.selectionStart=n,e.selectionEnd=n+t.length;const s=new Event("input",{bubbles:!0});return e.dispatchEvent(s),!0}catch(n){return console.error("[Flint] Error replacing in textarea:",n),!1}}replaceInContentEditable(e){try{const t=window.getSelection();if(!t||0===t.rangeCount)return!1;const n=t.getRangeAt(0);n.deleteContents();const r=document.createTextNode(e);n.insertNode(r),n.setStartBefore(r),n.setEndAfter(r),t.removeAllRanges(),t.addRange(n);const i=document.activeElement;if(i){const e=new Event("input",{bubbles:!0});i.dispatchEvent(e)}return!0}catch(t){return console.error("[Flint] Error replacing in contenteditable:",t),!1}}async fallbackToClipboard(e,t){try{return console.warn("[Flint] Using clipboard fallback:",t),navigator.clipboard&&navigator.clipboard.writeText?(await navigator.clipboard.writeText(e),console.log("[Flint] Text successfully copied to clipboard"),{success:!0,usedClipboard:!0}):(console.error("[Flint] Clipboard API not available"),{success:!1,usedClipboard:!1,error:"Clipboard API not available in this context"})}catch(n){return console.error("[Flint] Clipboard fallback failed:",n),{success:!1,usedClipboard:!1,error:`Clipboard operation failed: ${n instanceof Error?n.message:"Unknown error"}`}}}}class i{constructor(){t(this,"host",null),t(this,"shadowRoot",null),t(this,"bar",null),t(this,"scrollHandler",null),t(this,"resizeHandler",null),t(this,"callbacks",null),t(this,"scrollTimeout",null),this.createShadowHost()}createShadowHost(){if(this.host)return;this.host=document.createElement("div"),this.host.id="flint-host",Object.assign(this.host.style,{position:"fixed",inset:"0",zIndex:"2147483647",pointerEvents:"none"}),this.shadowRoot=this.host.attachShadow({mode:"open"}),this.bar=document.createElement("div"),this.bar.className="flint-bar",this.bar.style.cssText="\n      position: absolute;\n      display: none;\n      pointer-events: auto;\n      background: rgba(50, 50, 50, 0.95);\n      color: #F4F6FA;\n      border: none;\n      border-radius: 20px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      padding: 8px 10px;\n      gap: 8px;\n      align-items: center;\n      opacity: 0;\n      transform: translate3d(0, 0, 0) scale(0.9);\n      transition: opacity 0.3s ease, transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), left 0.2s ease, top 0.2s ease;\n      will-change: transform, opacity, left, top;\n      z-index: 999999;\n    ",this.bar.innerHTML='\n      <button data-action="generate" aria-label="Generate" type="button">\n        <svg width="14" height="14" viewBox="0 0 56 56" fill="currentColor">\n          <path d="M 26.6875 12.6602 C 26.9687 12.6602 27.1094 12.4961 27.1797 12.2383 C 27.9062 8.3242 27.8594 8.2305 31.9375 7.4570 C 32.2187 7.4102 32.3828 7.2461 32.3828 6.9648 C 32.3828 6.6836 32.2187 6.5195 31.9375 6.4726 C 27.8828 5.6524 28.0000 5.5586 27.1797 1.6914 C 27.1094 1.4336 26.9687 1.2695 26.6875 1.2695 C 26.4062 1.2695 26.2656 1.4336 26.1953 1.6914 C 25.3750 5.5586 25.5156 5.6524 21.4375 6.4726 C 21.1797 6.5195 20.9922 6.6836 20.9922 6.9648 C 20.9922 7.2461 21.1797 7.4102 21.4375 7.4570 C 25.5156 8.2774 25.4687 8.3242 26.1953 12.2383 C 26.2656 12.4961 26.4062 12.6602 26.6875 12.6602 Z M 15.3438 28.7852 C 15.7891 28.7852 16.0938 28.5039 16.1406 28.0821 C 16.9844 21.8242 17.1953 21.8242 23.6641 20.5821 C 24.0860 20.5117 24.3906 20.2305 24.3906 19.7852 C 24.3906 19.3633 24.0860 19.0586 23.6641 18.9883 C 17.1953 18.0977 16.9609 17.8867 16.1406 11.5117 C 16.0938 11.0899 15.7891 10.7852 15.3438 10.7852 C 14.9219 10.7852 14.6172 11.0899 14.5703 11.5352 C 13.7969 17.8164 13.4687 17.7930 7.0469 18.9883 C 6.6250 19.0821 6.3203 19.3633 6.3203 19.7852 C 6.3203 20.2539 6.6250 20.5117 7.1406 20.5821 C 13.5156 21.6133 13.7969 21.7774 14.5703 28.0352 C 14.6172 28.5039 14.9219 28.7852 15.3438 28.7852 Z M 31.2344 54.7305 C 31.8438 54.7305 32.2891 54.2852 32.4062 53.6524 C 34.0703 40.8086 35.8750 38.8633 48.5781 37.4570 C 49.2344 37.3867 49.6797 36.8945 49.6797 36.2852 C 49.6797 35.6758 49.2344 35.2070 48.5781 35.1133 C 35.8750 33.7070 34.0703 31.7617 32.4062 18.9180 C 32.2891 18.2852 31.8438 17.8633 31.2344 17.8633 C 30.6250 17.8633 30.1797 18.2852 30.0860 18.9180 C 28.4219 31.7617 26.5938 33.7070 13.9140 35.1133 C 13.2344 35.2070 12.7891 35.6758 12.7891 36.2852 C 12.7891 36.8945 13.2344 37.3867 13.9140 37.4570 C 26.5703 39.1211 28.3281 40.8321 30.0860 53.6524 C 30.1797 54.2852 30.6250 54.7305 31.2344 54.7305 Z"/>\n        </svg>\n      </button>\n      <button data-action="summarize" aria-label="Summarize" type="button">\n        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <line x1="8" y1="6" x2="21" y2="6"/>\n          <line x1="8" y1="12" x2="21" y2="12"/>\n          <line x1="8" y1="18" x2="21" y2="18"/>\n          <line x1="3" y1="6" x2="3.01" y2="6"/>\n          <line x1="3" y1="12" x2="3.01" y2="12"/>\n          <line x1="3" y1="18" x2="3.01" y2="18"/>\n        </svg>\n      </button>\n      <button data-action="rewrite" aria-label="Rewrite" type="button">\n        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>\n          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>\n        </svg>\n      </button>\n      <button data-action="close" aria-label="Close" type="button">\n        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n          <line x1="18" y1="6" x2="6" y2="18"/>\n          <line x1="6" y1="6" x2="18" y2="18"/>\n        </svg>\n      </button>\n    ';const e=document.createElement("style");e.textContent="\n      .flint-bar {\n        display: flex;\n      }\n      .flint-bar button {\n        /* Aggressive reset */\n        all: unset;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        \n        /* Size and spacing */\n        box-sizing: border-box;\n        width: 22px;\n        height: 22px;\n        padding: 0 !important;\n        margin: 0 !important;\n        \n        /* Remove all borders and backgrounds */\n        border: none !important;\n        border-width: 0 !important;\n        background: transparent !important;\n        background-color: transparent !important;\n        background-image: none !important;\n        box-shadow: none !important;\n        outline: none !important;\n        \n        /* Color and shape */\n        color: inherit;\n        border-radius: 6px;\n        \n        /* Layout */\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        transition: background 0.12s ease;\n      }\n      .flint-bar button:hover {\n        background: rgba(255, 255, 255, 0.1) !important;\n      }\n      .flint-bar button:active {\n        transform: translateY(1px);\n      }\n      .flint-bar button:focus {\n        outline: none !important;\n        box-shadow: none !important;\n      }\n      .flint-bar button svg {\n        display: block;\n        pointer-events: none;\n      }\n    ",this.shadowRoot.append(e,this.bar),this.bar.addEventListener("pointerdown",e=>{const t=e.target.closest("button");if(!t)return;e.preventDefault(),e.stopImmediatePropagation();const n=t.getAttribute("data-action");if(n)if("close"!==n){if(this.callbacks)switch(n){case"generate":this.callbacks.onGenerate();break;case"summarize":this.callbacks.onSummarize();break;case"rewrite":this.callbacks.onRewrite()}}else this.hide()},{capture:!0}),document.documentElement?document.documentElement.appendChild(this.host):document.addEventListener("DOMContentLoaded",()=>{this.host&&document.documentElement&&document.documentElement.appendChild(this.host)}),console.log("[Flint] Shadow host created")}show(e){if(!this.bar)return;this.callbacks=e;const t=window.getSelection();if(!t||0===t.rangeCount)return;const n=t.getRangeAt(0).getBoundingClientRect();console.log("[Flint Minibar] Selection rect:",{top:n.top,bottom:n.bottom,left:n.left,right:n.right,width:n.width,height:n.height});let r=n.left+n.width/2-90,i=n.top-40-8;console.log("[Flint Minibar] Calculated position before bounds check:",{left:r,top:i});const o=window.innerWidth,s=window.innerHeight;r<10&&(r=10),r+180>o-10&&(r=o-180-10),i<10&&(i=n.bottom+8),i+40>s-10&&(i=s-40-10),console.log("[Flint Minibar] Final position after bounds check:",{left:r,top:i}),this.bar.style.left=`${Math.round(r)}px`,this.bar.style.top=`${Math.round(i)}px`,this.bar.style.display="flex",this.bar.style.pointerEvents="auto",console.log("[Flint Minibar] Applied styles:",{left:this.bar.style.left,top:this.bar.style.top,position:this.bar.style.position}),setTimeout(()=>{this.bar&&this.callbacks&&requestAnimationFrame(()=>{this.bar&&(this.bar.style.opacity="1",this.bar.style.transform="translate3d(0, 0, 0) scale(1)",this.bar.style.pointerEvents="auto")})},100),this.setupScrollRepositioning(),this.setupResizeRepositioning()}hide(){this.scrollTimeout&&(clearTimeout(this.scrollTimeout),this.scrollTimeout=null),this.bar&&(this.bar.style.opacity="0",this.bar.style.transform="translate3d(0, 0, 0) scale(0.9)",setTimeout(()=>{this.bar&&(this.bar.style.display="none")},200)),this.removeScrollListener(),this.removeResizeListener(),this.callbacks=null}isVisible(){return null!==this.callbacks}setupScrollRepositioning(){this.scrollHandler=()=>{this.bar&&(this.bar.style.opacity="0",this.bar.style.transform="translate3d(0, 0, 0) scale(0.9)",this.bar.style.pointerEvents="none"),this.scrollTimeout&&clearTimeout(this.scrollTimeout),this.scrollTimeout=window.setTimeout(()=>{const e=window.getSelection();if(!e||0===e.rangeCount||0===e.toString().trim().length)return void this.hide();const t=e.getRangeAt(0).getBoundingClientRect(),n=window.innerHeight;if(t.bottom<0||t.top>n)return;let r=t.left+t.width/2-90,i=t.top-40-8;const o=window.innerWidth;r<10&&(r=10),r+180>o-10&&(r=o-180-10),i<10&&(i=t.bottom+8),i+40>n-10&&(i=n-40-10),this.bar&&(this.bar.style.left=`${Math.round(r)}px`,this.bar.style.top=`${Math.round(i)}px`,this.bar.style.opacity="0",this.bar.style.transform="translate3d(0, 0, 0) scale(0.5)",this.bar.style.pointerEvents="none",requestAnimationFrame(()=>{this.bar&&(this.bar.style.opacity="1",this.bar.style.transform="translate3d(0, 0, 0) scale(1)",this.bar.style.pointerEvents="auto")}))},300)},window.addEventListener("scroll",this.scrollHandler,{passive:!0,capture:!0}),document.addEventListener("scroll",this.scrollHandler,{passive:!0,capture:!0})}removeScrollListener(){this.scrollHandler&&(window.removeEventListener("scroll",this.scrollHandler,!0),document.removeEventListener("scroll",this.scrollHandler,!0),this.scrollHandler=null)}setupResizeRepositioning(){this.resizeHandler=()=>{const e=window.getSelection();if(!e||0===e.rangeCount)return void this.hide();const t=e.getRangeAt(0).getBoundingClientRect();let n=t.left+t.width/2-90,r=t.top-40-8;const i=window.innerWidth,o=window.innerHeight;n<10&&(n=10),n+180>i-10&&(n=i-180-10),r<10&&(r=t.top+8),r+40>o-10&&(r=o-40-10),this.bar&&(this.bar.style.left=`${Math.round(n)}px`,this.bar.style.top=`${Math.round(r)}px`)},window.addEventListener("resize",this.resizeHandler,{passive:!0})}removeResizeListener(){this.resizeHandler&&(window.removeEventListener("resize",this.resizeHandler),this.resizeHandler=null)}}new class{constructor(){t(this,"selectionHandler"),t(this,"caretHandler"),t(this,"miniBarInjector"),t(this,"SELECTION_THRESHOLD",3),t(this,"selectionDebounceTimer",null),t(this,"lastSelectionText",""),t(this,"isPanelOpen",!1),this.selectionHandler=new n,this.caretHandler=new r,this.miniBarInjector=new i,this.setupSelectionListener(),this.setupMessageListener(),this.setupPanelStateListener(),this.isGoogleDocs()&&console.log("[Flint] Google Docs detected - mini bar may not work due to custom editor"),console.log("[Flint] Content script initialized")}isGoogleDocs(){return"docs.google.com"===window.location.hostname&&window.location.pathname.startsWith("/document/")}setupPanelStateListener(){setInterval(()=>{chrome.runtime.sendMessage({type:"PING_PANEL",source:"content-script"},e=>{const t=this.isPanelOpen;if(this.isPanelOpen=!chrome.runtime.lastError&&!0===e?.success,!t&&this.isPanelOpen){const e=window.getSelection();e&&e.removeAllRanges(),this.miniBarInjector.hide(),this.lastSelectionText=""}t&&!this.isPanelOpen&&this.miniBarInjector.hide()})},2e3)}setupSelectionListener(){this.selectionHandler.onSelectionChange(e=>{if(null!==this.selectionDebounceTimer&&(clearTimeout(this.selectionDebounceTimer),this.selectionDebounceTimer=null),!e||e.length<this.SELECTION_THRESHOLD)return this.miniBarInjector.hide(),void(this.lastSelectionText="");this.isGoogleDocs()?console.log("[Flint] Skipping mini bar on Google Docs - use keyboard shortcuts or copy/paste instead"):this.selectionDebounceTimer=window.setTimeout(()=>{const e=this.selectionHandler.getSelectedText();!e||e.length<this.SELECTION_THRESHOLD||this.isPanelOpen&&(e===this.lastSelectionText&&this.miniBarInjector.isVisible()||(this.lastSelectionText=e,this.showMiniBar()))},200)})}setupMessageListener(){chrome.runtime.onMessage.addListener((e,t,n)=>(this.handleMessage(e).then(n).catch(e=>{console.error("[Flint] Error handling message:",e),n({success:!1,error:e instanceof Error?e.message:"Unknown error"})}),!0))}async handleMessage(e){switch(console.log("[Flint] Received message:",e.type),e.type){case"GET_SELECTION":return this.handleGetSelection();case"GET_CURSOR_CONTEXT":return this.handleGetCursorContext(e.payload?.maxLength);case"INSERT_TEXT":return this.handleInsertText(e.payload?.text);case"REPLACE_TEXT":return this.handleReplaceText(e.payload?.text);case"SHOW_MINI_BAR":return this.handleShowMiniBar();case"HIDE_MINI_BAR":return this.handleHideMiniBar();default:return{success:!1,error:`Unknown message type: ${e.type}`}}}handleGetSelection(){try{const e=this.selectionHandler.getSelectedText();return e?{success:!0,data:{text:e,isEditable:this.selectionHandler.isEditableSelection()}}:{success:!1,error:"No text selected"}}catch(e){return console.error("[Flint] Error getting selection:",e),{success:!1,error:e instanceof Error?e.message:"Failed to get selection"}}}handleGetCursorContext(e){try{const t=this.caretHandler.getCursorContext(e);return t?{success:!0,data:t}:{success:!1,error:"No cursor position found or not in editable field"}}catch(t){return console.error("[Flint] Error getting cursor context:",t),{success:!1,error:t instanceof Error?t.message:"Failed to get cursor context"}}}async handleInsertText(e){try{if(!e)return{success:!1,error:"No text provided for insertion"};const t=await this.caretHandler.insertAtCaret(e);return t.success?{success:!0,data:{usedClipboard:t.usedClipboard,message:t.usedClipboard?"Text copied to clipboard. Please paste it manually.":"Text inserted successfully"}}:{success:!1,error:t.error||"Failed to insert text"}}catch(t){return console.error("[Flint] Error inserting text:",t),{success:!1,error:t instanceof Error?t.message:"Failed to insert text"}}}async handleReplaceText(e){try{if(!e)return{success:!1,error:"No text provided for replacement"};if(!this.selectionHandler.getSelectedText())return{success:!1,error:"No text selected to replace"};const t=await this.caretHandler.replaceSelection(e);return t.success?(this.miniBarInjector.hide(),{success:!0,data:{usedClipboard:t.usedClipboard,message:t.usedClipboard?"Text copied to clipboard. Please paste it manually to replace the selection.":"Text replaced successfully"}}):{success:!1,error:t.error||"Failed to replace text"}}catch(t){return console.error("[Flint] Error replacing text:",t),{success:!1,error:t instanceof Error?t.message:"Failed to replace text"}}}handleShowMiniBar(){try{return this.showMiniBar(),{success:!0,data:{message:"Mini bar shown"}}}catch(e){return console.error("[Flint] Error showing mini bar:",e),{success:!1,error:e instanceof Error?e.message:"Failed to show mini bar"}}}handleHideMiniBar(){try{return this.miniBarInjector.hide(),{success:!0,data:{message:"Mini bar hidden"}}}catch(e){return console.error("[Flint] Error hiding mini bar:",e),{success:!1,error:e instanceof Error?e.message:"Failed to hide mini bar"}}}showMiniBar(){this.miniBarInjector.show({onGenerate:()=>{const e=this.selectionHandler.getSelectedText();e&&(this.sendMessageToPanel("INSERT_AND_OPEN_GENERATE",{text:e}),this.miniBarInjector.hide())},onSummarize:()=>{const e=this.selectionHandler.getSelectedText();e&&(this.sendMessageToPanel("INSERT_AND_OPEN_SUMMARY",{text:e}),this.miniBarInjector.hide())},onRewrite:()=>{const e=this.selectionHandler.getSelectedText();e&&(this.sendMessageToPanel("INSERT_AND_OPEN_REWRITE",{text:e}),this.miniBarInjector.hide())},onClose:()=>{this.miniBarInjector.hide(),this.selectionHandler.clearPreservedSelection()}})}sendMessageToPanel(e,t){console.log("[Flint] Sending message to background for panel relay:",e),chrome.runtime.sendMessage({type:e,payload:t,source:"content-script"},t=>{chrome.runtime.lastError?console.error("[Flint] Error sending message:",chrome.runtime.lastError):console.log("[Flint] Message relayed successfully:",e,t)})}};
