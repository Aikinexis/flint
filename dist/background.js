const e="flint-content-script";async function n(e,n){switch(e){case"PING_PANEL":case"OPEN_GENERATE_TAB":case"OPEN_SUMMARY_TAB":case"OPEN_REWRITE_TAB":case"OPEN_SETTINGS_TAB":case"INSERT_AND_OPEN_GENERATE":case"INSERT_AND_OPEN_SUMMARY":case"INSERT_AND_OPEN_REWRITE":case"OPEN_HISTORY_TAB":return async function(e,n){try{return await chrome.runtime.sendMessage({type:e,payload:n,source:"background-relay"})||{success:!0,data:{message:"Message forwarded to panel"}}}catch(t){return t instanceof Error&&t.message.includes("Receiving end does not exist")?{success:!1,error:"Panel is not open"}:(console.error("[Flint Background] Failed to forward message to panel:",t),{success:!1,error:t instanceof Error?t.message:"Failed to communicate with panel"})}}(e,n);default:return{success:!1,error:`Unknown content script message type: ${e}`}}}async function t(e,n){if("PANEL_OPENED"===e){console.log("[Flint Background] ✅ Received PANEL_OPENED from panel");try{const e=await chrome.tabs.query({active:!0,currentWindow:!0});if(console.log("[Flint Background] Active tab:",e[0]?.id),e[0]?.id){const{"flint.lastSelectionPoint":n}=await chrome.storage.local.get("flint.lastSelectionPoint");return await chrome.tabs.sendMessage(e[0].id,{type:"PANEL_OPENED",source:"panel",payload:{position:n}}),console.log("[Flint Background] ✅ Sent PANEL_OPENED to content script"),{success:!0,data:{message:"Panel opened notification sent"}}}}catch(t){console.error("[Flint Background] ❌ Failed to send PANEL_OPENED:",t)}return{success:!0}}if("UPDATE_SHORTCUTS"===e)return console.log("[Flint Background] Shortcuts updated:",n),{success:!0,data:{message:"Shortcuts saved. Note: Chrome shortcuts are managed in chrome://extensions/shortcuts"}};try{const r=await chrome.tabs.query({active:!0,currentWindow:!0});if(0===r.length||!r[0])return console.error("[Flint Background] No active tab found"),{success:!1,error:"No active tab found. Please make sure you have a tab open."};const s=r[0];return s.id?s.url&&(s.url.startsWith("chrome://")||s.url.startsWith("chrome-extension://")||s.url.startsWith("edge://")||s.url.startsWith("about:"))?{success:!1,error:"Cannot access this page. Flint does not work on browser internal pages."}:await async function(e,n,r){try{console.log(`[Flint Background] Forwarding message to content script in tab ${e}:`,n);const t=await chrome.tabs.sendMessage(e,{type:n,payload:r});return console.log("[Flint Background] Received response from content script:",t),t&&"object"==typeof t?t:{success:!0,data:t}}catch(t){return console.error("[Flint Background] Failed to send message to content script:",t),t instanceof Error?t.message.includes("Receiving end does not exist")?{success:!1,error:"Content script not loaded. Please refresh the page and try again."}:t.message.includes("No tab with id")?{success:!1,error:"Tab is no longer available. Please try again in the current tab."}:t.message.includes("Extension context invalidated")?{success:!1,error:"Extension was reloaded. Please refresh the page and try again."}:{success:!1,error:t.message}:{success:!1,error:"Failed to communicate with page. Please refresh and try again."}}}(s.id,e,n):(console.error("[Flint Background] Active tab has no ID"),{success:!1,error:"Cannot access tab information. Please try again."})}catch(t){return console.error("[Flint Background] Error in handlePanelMessage:",t),{success:!1,error:t instanceof Error?t.message:"Failed to process panel message"}}}chrome.runtime.onInstalled.addListener(async n=>{"install"===n.reason?console.log("[Flint Background] Extension installed"):"update"===n.reason&&console.log("[Flint Background] Extension updated from version",n.previousVersion);try{await chrome.sidePanel.setPanelBehavior({openPanelOnActionClick:!0}),console.log("[Flint Background] Side panel behavior configured"),"update"===n.reason&&(console.log("[Flint Background] Cleaning up old content scripts..."),await async function(){try{(await chrome.scripting.getRegisteredContentScripts({ids:[e]})).length>0?(await chrome.scripting.unregisterContentScripts({ids:[e]}),console.log("[Flint Background] Content scripts unregistered successfully")):console.log("[Flint Background] No content scripts to unregister (expected on first install)")}catch(n){n instanceof Error&&!n.message.includes("not found")&&console.warn("[Flint Background] Error unregistering content scripts:",n.message)}}()),console.log("[Flint Background] Registering content scripts..."),await async function(){try{if((await chrome.scripting.getRegisteredContentScripts({ids:[e]})).length>0)return void console.log("[Flint Background] Content script already registered");await chrome.scripting.registerContentScripts([{id:e,js:["content.js"],matches:["<all_urls>"],runAt:"document_idle",allFrames:!1}]),console.log("[Flint Background] Content script registered successfully")}catch(n){if(n instanceof Error){if(n.message.includes("duplicate"))return void console.warn("[Flint Background] Content script already registered (duplicate)");console.error("[Flint Background] Failed to register content script:",n.message)}else console.error("[Flint Background] Failed to register content script:",n);throw n}}(),console.log("[Flint Background] Setup completed successfully")}catch(t){console.error("[Flint Background] Setup failed:",t)}}),chrome.runtime.onMessage.addListener((e,r,s)=>(async function(e,r){const{type:s,payload:o,source:a}=e;if("content-script"===a)return n(s,o);if("panel"===a)return t(s,o);return r.tab?.id?n(s,o):t(s,o)}(e,r).then(s).catch(e=>{console.error("[Flint Background] Error handling message:",e),s({success:!1,error:e instanceof Error?e.message:"Unknown error"})}),!0)),chrome.runtime.onStartup.addListener(()=>{}),self.addEventListener("beforeunload",()=>{});
